    Primeira coisa que nosso programa tem que fazer é ler o arquivo que tem o nome que o
usuário inserir, após a leitura do arquivo temos o método readlines que coloca todas as
linhas em uma lista de strings em que cada elemento é uma linha do arquivo. Como vamos usar
o módulo numpy para fazer os cálculos, ele ignora o '\n' para realizar os cálculos portanto,
não temos que nos preocupar com isso, porém temos que fazer uma limpa nas linhas vazias e
nos comentários, que na netlist iniciam-se com o caractére '*'.
    Partimos, agora, para as matrizes Gn (nxn) e vetor In (nx1), em que n é o número de nós
do circuito. Esse valor pode ser definido procurando na netlist o nó de maior valor, ou seja,
sabendo que, como exemplo, uma das linhas de uma netlist é 'R1 0 5 2', temos que o resistor R1
está conectado do nó 0 ao nó 5 com resistência de 2 Ohms, ou seja, temos 5 nós no circuito (obs,
o número de nós está desconsiderando o nó terra, ou seja, no total temos n+1 nós no circuito).
Com o número de nós em mãos, podemos então criar a matriz Gn e o vetor In, inicialmente
compostos de zeros.
    Para construir nosso algoritmo para resolver o sistema Gn.e=In, precisamos adicionar os
valores de resistências e fontes dependentes em Gn e fontes independentes em In, para isso
usamos as estampas, ou seja, um padrão para cada elemento do circuito. Assim os resistores e
fontes (in)dependentes têm um tipo de estampa para serem adicionados nas matrizes, ou seja,
podemos dizer que seriam estampadas nas matrizes.
    Após definirmos as estampas, temos que alterar a matriz Gn ou o vetor In de forma a
completar o sistema Gn.e=In, como visto no exemplo 'R1 0 5 2', o primeiro item é o resistor
R1, para sabermos que é um resistor usamos o primeiro caracter da string 'R1', ou seja, o R,
e em Python podemos dizer que 'R' é o elemento 0 da string e '1' é o elemento 1 da string.
Podemos usar isso para saber se é uma resistência (R), uma fonte independente (I) ou uma fonte
dependente (G).
    Por fim, depois de escolhermos qual estampa usar e da função alterar nossa matriz Gn ou o
vetor In, podemos usar o módulo numpy para resolver o sistema Gn.e=In. Dentro do numpy temos o
linalg.solve, que como o próprio nome diz, resolve um sistema de equações lineares com as matrizes,
no nosso caso a função será chamada como np.linalg.solve(Gn, In) retornando a solução do nosso
sistema.
    Para testarmos o programa, simplesmente rodamos ele tendo o arquivo .txt com a netlist
desejada no mesmo diretório. Quando chamamos a função main(), a primeira coisa que aparece
na tela é o programa solicitando o nome do arquivo que contém a netlist, precisamos inserir o
nome do arquivo com a extensão txt, por exemplo, 'netlist.txt' (sem as aspas).
    Usei a primeira netlist dada no arquivo de testes para o trabalho, alterada para testes.
Alterei a netlist para conter linhas vazias e comentários para testar o polimento do programa.

netlist.txt:
-------------------------------------
I1 0 1 DC 5
*testes para ignorar
I2 1 2 DC 4

I3 0 2 DC 5

G1 0 2 1 2 3
*mais testes comentários
R1 0 1 2
R2 1 2 4
-------------------------------------

    Para testar com essa netlist, somente chamei a função main com o nome do arquivo
como argumento. Após todos os cálculos, o programa retornou um vetor coluna com duas linhas,
a linha um equivale a tensão e1 e a linha dois equivale a tensão e2:

Retorno:
-------------------------------------
[[3.38461538]
 [6.15384615]]
-------------------------------------

    Assim, temos a solução do nosso sistema Gn.e=In, que é o vetor de tensões e.
